#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("highscoreleaderboard:server");
var http = require("http");
const { Server } = require("socket.io");
var sqlite3 = require("sqlite3");
var { open } = require("sqlite");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
async function main() {
  //open db file
  const db = await open({
    filename: "scores.db",
    driver: sqlite3.Database,
  });
  //create db tables
  await db.exec(`
  CREATE TABLE IF NOT EXISTS scores(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    client_offset  TEXT_UNIQUE,
    content INTEGER
  )`);

  //Couple socket.io to express
  const io = new Server(server);
  io.on("connection", async (socket) => {
    console.log("A user connected");
    if (!socket.recovered) {
      //connection state recovery
      try {
        //subject to gchange
        await db.each(
          `SELECT id, content FROM scores WHERE id > ?`,
          [socket.handshake.auth.serverOffset || 0],
          (_err, row) => {
            socket.emit("score msg", row.content, row.id);
          }
        );
      } catch (e) {
        //handle error
      }
    }

    socket.on("disconnect", () => console.log("User disconnected"));

    socket.on("score msg", async (msg, clientOffset, callback) => {
      console.log("score: " + msg);
      let result;
      try {
        //store score in db
        result = await db.run(
          `INSERT INTO scores (content, client_offset) VALUES (?, ?)`,
          msg,
          clientOffset
        );
      } catch (e) {
        if (e.errno === 19) {
          //no sql duplicaterows
          callback();
        }
        return;
      }
      //include offset with score
      io.emit("score msg", msg, result.lastID);
      callback();
    });
  });

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on("error", onError);
  server.on("listening", onListening);
}
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
main();
